
   This file tells you how to make a new executable.

Introduction :
------------

The rules describing how to build an executable are stored in the directory ~/link of gmkpack.
There is one subdirectory per executable.
Normally, the administrator of gmkpack is in charge of creating new directories and rules 
to create new executables.
However, for research purpose, it is possible to create private executables ; to do that,
one has to create a directory ~/.gmkpack/link (unless it already exists) in the HOME directory.
In this directory, on can create one directory per new executable, following the conventional
structure described below.
The easiest way to do it is to copy an existing directory with another name, and modify it.

Structure of the rule for the executable 'exec_name' :
----------------------------------------------------

exec_name/ :
Main directory

exec_name/name :
Name of the binary file.
The custom at ECMWF is to take the name 'exec_name' and add the extension ".x"
The custom at Meteo-France is to convert the name 'exec_name' into capital letters.

exec_name/entry :
Entry point of the executable, as a relative object filename from the directory ~src/local.
Wild characters can be used to survive when the file has been moved.
It is possible to specify more than one object filename, on the same line or more lines. 
In that case, the first object should be the entry point, and the following objects will be linked
immediately after the entry point, in the order they appear in that file.

exec_name/projlist :
Ordered list of the 'projects' (= main directories of source codes) to link with, 
because to each 'project' corresponds one objects archive library, or a set of objects archive libraries. 
Note that both old names and new names of projects should appear, in order to ensure backward compatibility
with old code releases.

exec_name/ldflags
Ordered list of keywords to build the linking command.
The first one should be the keyword name of the linker ; the other ones should be the keywords of linker options.
The possible keywords should be setup in the configuration file :
LNK_MPI   : linker for MPI fortran programs
LNK_STD   : linker for serial fortran programs (to be linked with a dummy mpi library)
LNK_CC    : linker for C programs
LNK_CXX   : linker for mixed c++/fortran programs
CXXNAME   : linker (=compiler) for c++ programs
LNK_FLAGS : linker options for fortran programs
LNK_CXX_FLAGS : linker additional options for c++ programs (can be libraries)
LD_LIBM   : option to link with libm.
LD_LIBC   : option to link with libc.
LD_LIBVFL : option to link with libvfl.

exec_name/blacklist :
Blacklist filename, as a relative name from the directory ~src/local.
Wild characters can be used to survive when the file has been moved.
If no blacklist file is used, this file should be empty.

exec_name/system_libs :
Ordered list of keywords to link with bottom-level libraries.
Keywords names should start with "LD_" ; it is recommended that the keywords suffix names recall the name
of the library.
The referenced keywords are the following ones :
LD_LANG01             : lapack library
LD_LANG02             : blas library
LD_USR_EECFI          : ecfi library
LD_USR_GRIB_API       : grib_api C library
LD_USR_GRIB_API_F90   : grib_api fortran library
LD_USR_JPEG           : jasper or openjpeg library
LD_USR_MAGICS         : magics "MagPlusSingle" library
LD_USR_MAGPLUS        : magics "MagPlus" library
LD_USR_MF_DUMMY       : dummy library of Meteo-France software (to link IFS)
LD_USR_NETCDF         : netcdf C library
LD_USR_NETCDF_F       : netcdf Fortran library
LD_USR_HDF5           : hdf5 C library
LD_USR_HDF5_FORTRAN   : hdf5 Fortran library
LD_USR_HDF5_HLFORTRAN : hdf5 High Level Fortran library
LD_MPI0*              : MPI libraries (deprecated)
LD_MPI_DUMMY          : dummy MPI libraries (for serial programs)
LD_SYS*               : bottom level system libraries. For smplicity,they should always be used.
LD_USR01              : "read grib" (rgb) library by Meteo-France.
LD_USR02              : bufr library
LD_USR03              : EC library (deprecated)
LD_USR04              : gribex library
LD_USR05              : "field database" (fdb) library by ECMWF. 
LD_USR06              : "wave model" (wam) library by ECMWF.
LD_USR07              : library of the C code generated by blacklist (deprecated)
LD_USR08              : NAG library
LD_USR09              : OASIS library

exec_name/excluded_libs/ :
Sub-libraries to be excluded, for each project.
The objects of each project can be saved either in a single archive library named lib${project}.${branch}.a,
or they can be split in sub-libraries, named "lib${subdir}${project}.${branch}.a"
It can be convenient, for instance, to exclude main programs from a libraries ; or to split a huge library if
all its content is not needed for an executable which would need it.
For each relevent project, the directory excluded_libs/ should contains a file with the name of this project,
and this file should contain the list of the sub-libraries to exclude, identified by their stamp "${subdir}".
Note that old project names may appear as symbolic link to the corresponding new project name, in order to
ensure backward compatibility with old code releases.

