#!/bin/bash
########################################################################
#
#    Script unsxrpack
#    ----------------
#
#    Purpose : In the framework of a pack : to update the unsatisfied
#    -------   external reference libraries
#
#    Usage : unsxrpack
#    -----
#
#    Environment variables :
#    ---------------------
#
#                MKTOP            : directory of all source files
#                GMKUNSX          : directory of unsatisfied external references
#                GMKUNSX_QUIET    : directory of quiet unsatisfied external references
#                GMKUNSX_VERBOOSE : directory of verboose unsatisfied external references 
#                VCCNAME          : C compiler name
#                VCCFLAGS         : C compiler flags
#                AR               : ar command
#                MKLIB            : directory of libraries 
#
########################################################################
#
export LC_ALL=C
if [ "$ZSH_NAME" = "zsh" ] ; then
  setopt +o nomatch
fi

if [ -d $MKTOP/$GMKUNSX ] ; then
  echo
  echo ------ Remake/update unsatisfied external references libraries ------
  echo
  MyTmp=$GMKWRKDIR/unsxrpack
  mkdir -p $MyTmp
  target=$(uname -s | tr '[A-Z]' '[a-z]')
  for dir in $GMKUNSX_QUIET $GMKUNSX_VERBOOSE ; do
    mylib=lib${GMKUNSX}-${dir}.${GMKLOCAL}.a
    find $MyTmp -name "*" -type f | xargs /bin/rm -f
    cd $MKTOP/$GMKUNSX/$dir
#   Remove object files in library but no more in source directory
    if [ -f $MKLIB/$mylib ] ; then 
      for object in $($AR t $MKLIB/$mylib | grep "\.o$") ; do
        if [ ! -f $(basename $object .o) ] && [ ! -f $(basename $object .c) ] ; then
          $AR d $MKLIB/$mylib $object
        fi
      done
    fi
#   Create the compile files if not already in archive lib
    for file in $(find * -name "*" -type f -print 2>/dev/null) ; do
      if [ "$(echo $file | $AWK -F"." '{print $NF}')" = "c" ] ; then
        cp $file $MyTmp
      else
        if [ ! "$($AR t $MKLIB/$mylib ${file}.o 2>/dev/null)" ] ; then
          if [ "$dir" = "$GMKUNSX_QUIET" ] ; then
            echo "long long int ${file}() { return 0L; }" > $MyTmp/$file.c
          else
            echo "long long int ${file}() { printf(\"${file} : dummy external reference by gmkpack\\\n\"); return 0L; }" > $MyTmp/$file.c
          fi
        fi
      fi
    done
#   Compile
    cd $MyTmp
    find . -name "*.c" -exec $VCCNAME $(eval echo $VCCFLAGS) {} \; 2>/dev/null
#   Archive
    find . -name "*.o"
    find . -name "*.o" -exec touch archive_signal \; 2>/dev/null
    if [ -f archive_signal ] ; then
      echo "$mylib :"
      \rm archive_signal
    fi
    if [ "$target" = "darwin" ] ; then
      find . -name "*.o" -exec $AR -qvS $MKLIB/$mylib {} \; 2>/dev/null
      if [ -f $MKLIB/$mylib ] ; then
        ranlib -no_warning_for_no_symbols $MKLIB/$mylib
      fi
    else
      find . -name "*.o" -exec $AR -qv $MKLIB/$mylib {} \; 2>/dev/null
    fi  
  done
  if [ "$GMK_INTFBMODULE_LIB" ] && [ -d $MKMAIN/$GMKINTFB ] ; then
#   Add the object files from autogenerated modules - funny compilers may need them.
    cd $MKMAIN/$GMKINTFB
    if [ $(cat $TARGET_PACK/$GMK_VIEW | wc -l) -eq 1 ] ; then
#     for a main pack, do it fast:
      find . -name "*.o" | xargs $AR -qv $MKLIB/$mylib 2>/dev/null
    else
      find . -name "*.o" | xargs $AR -ruv $MKLIB/$mylib {} \; 2>/dev/null
    fi
  fi
  cd $GMKWRKDIR
  \rm -rf unsxrpack
fi
